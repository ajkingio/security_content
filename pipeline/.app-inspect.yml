include:
  - local: "pipeline/.install-contentctl.yml"

# This CI job run appinspect using the latest version of contentctl
app_inspect:
  stage: app_inspect
  needs:
  - build
  artifacts:
    when: always
    paths:
      - artifacts/*
    expire_in: 60 days  
  before_script:
    - !reference [.install-contentctl, before_script]
  script:
    - 'NEW_VERSION=$(echo $CI_COMMIT_TAG | sed "s/^v//")'
    - 'echo "Updating contentctl.yml version: $NEW_VERSION"'
    - 'sed -i "/app:/,/apps:/s/version: [0-9]*\.[0-9]*\.[0-9]*/version: $NEW_VERSION/" contentctl.yml'
    - cat contentctl.yml
    - contentctl inspect --splunk-api-username $APPINSPECT_USERNAME --splunk-api-password $APPINSPECT_PASSWORD --stack_type victoria --enrichments

  after_script:
    - mkdir -p artifacts/app_inspect_report
    - cp -r dist/*.{json,html} artifacts/app_inspect_report
    - cp -r dist/*.tar.gz artifacts/

  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]$/'
      when: on_success
  
# This CI job uploads DA-ESS-ContentUpdate-latest.tar.gz to Splunkbase
upload_to_splunkbase:
  stage: app_inspect
  needs:
    - app_inspect
  artifacts:
    when: always
    paths:
      - artifacts/*
    expire_in: 60 days
  script:
    - echo "Start upload_to_splunkbase"
    - chmod +x pipeline/upload_to_splunkbase.sh
    - HTTP_STATUS=$(./pipeline/upload_to_splunkbase.sh)
    - |
      if [ "$HTTP_STATUS" -eq 200 ]; then
        echo "Upload to Splunkbase successful, pipeline will pass."
      else
        echo "Upload failed with status $HTTP_STATUS, failing the pipeline."
        exit 1
      fi
    - echo "Finished uploading to splunkbase"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]$/'
      when: on_success
